openapi: 3.0.3
info:
  title: Music Band Management API
  description: |
    API for managing a collection of music bands.
    
    Two web services:
    - **Main service** - complete management of music band collection
    - **Grammy service** - additional operations with singles and participants
  version: 1.0.0
  contact:
    name: API Support
    email: support@musicband.api
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://helios:8080/api/v1
    description: Production server on Helios

tags:
  - name: MusicBand
    description: Operations with music bands
  - name: Statistics
    description: Statistical operations
  - name: Search
    description: Search bands by criteria
  - name: Grammy
    description: Grammy service - additional operations

paths:
  /bands:
    get:
      tags:
        - MusicBand
      summary: Get list of music bands
      description: |
        Getting an array of music bands with support for:
        - Filtering by any fields
        - Sorting by any combination of fields
        - Paginated output of results
      operationId: getBands
      parameters:
        - name: page
          in: query
          description: Page number (starts from 0)
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
          example: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
          example: 20
        - name: sort
          in: query
          description: Fields for sorting
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
          example: ["name,asc", "numberOfParticipants,desc"]
        - name: name
          in: query
          description: Filter by band name
          required: false
          schema:
            type: string
          example: "Beatles"
        - name: numberOfParticipants
          in: query
          description: Filter by number of participants
          required: false
          schema:
            type: integer
            format: int32
          example: 4
        - name: genre
          in: query
          description: Filter by genre
          required: false
          schema:
            $ref: '#/components/schemas/MusicGenre'
        - name: albumsCount
          in: query
          description: Filter by number of albums
          required: false
          schema:
            type: integer
            format: int32
          example: 10
        - name: coordinatesX
          in: query
          description: Filter by X coordinate
          required: false
          schema:
            type: number
            format: double
        - name: coordinatesY
          in: query
          description: Filter by Y coordinate
          required: false
          schema:
            type: integer
            format: int64
            maximum: 945
      responses:
        '200':
          description: List of music bands
          content:
            application/xml:
              schema:
                type: object
                properties:
                  bands:
                    type: array
                    items:
                      $ref: '#/components/schemas/MusicBand'
                  totalElements:
                    type: integer
                    format: int64
                    description: Total number of elements
                  totalPages:
                    type: integer
                    format: int32
                    description: Total number of pages
                  currentPage:
                    type: integer
                    format: int32
                    description: Current page
                  pageSize:
                    type: integer
                    format: int32
                    description: Page size
                xml:
                  name: bandsResponse
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags:
        - MusicBand
      summary: Create new music band
      description: Adding a new band to the collection
      operationId: createBand
      requestBody:
        description: New band data
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/MusicBand'
            example: |
              <?xml version="1.0" encoding="UTF-8"?>
              <musicBand>
                <name>The Beatles</name>
                <coordinates>
                  <x>10.5</x>
                  <y>100</y>
                </coordinates>
                <numberOfParticipants>4</numberOfParticipants>
                <albumsCount>13</albumsCount>
                <genre>POP</genre>
                <label>
                  <sales>1000000.50</sales>
                </label>
              </musicBand>
      responses:
        '201':
          description: Band successfully created
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/MusicBand'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /bands/{id}:
    get:
      tags:
        - MusicBand
      summary: Get music band by ID
      description: Getting information about a specific music band
      operationId: getBandById
      parameters:
        - name: id
          in: path
          description: Band ID
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      responses:
        '200':
          description: Music band information
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/MusicBand'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags:
        - MusicBand
      summary: Update music band
      description: Updating music band information
      operationId: updateBand
      parameters:
        - name: id
          in: path
          description: Band ID
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      requestBody:
        description: Updated music band data
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/MusicBand'
      responses:
        '200':
          description: Band successfully updated
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/MusicBand'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    patch:
      tags:
        - MusicBand
      summary: Partially update music band
      description: |
        Partial update of music band information. Only provided fields will be updated.
        Unlike PUT, PATCH allows updating individual fields without affecting others.
      operationId: patchBand
      parameters:
        - name: id
          in: path
          description: Band ID
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      requestBody:
        description: |
          Partial music band data for update. Only include fields you want to modify.
          All validation rules still apply to provided fields.
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/MusicBandPatch'
            example: |
              <?xml version="1.0" encoding="UTF-8"?>
              <musicBandPatch>
                <name>The Beatles Updated</name>
                <numberOfParticipants>5</numberOfParticipants>
              </musicBandPatch>
      responses:
        '200':
          description: Band successfully patched
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/MusicBand'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - MusicBand
      summary: Delete music band
      description: Removing band from collection
      operationId: deleteBand
      parameters:
        - name: id
          in: path
          description: Band ID
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      responses:
        '204':
          description: Band successfully deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /bands/statistics/average-participants:
    get:
      tags:
        - Statistics
      summary: Get average number of participants
      description: Calculates the average value of numberOfParticipants field for all bands in the collection
      operationId: getAverageParticipants
      responses:
        '200':
          description: Average number of participants
          content:
            application/xml:
              schema:
                type: object
                properties:
                  averageParticipants:
                    type: number
                    format: double
                    description: Average number of participants
                    example: 4.2
                  totalBands:
                    type: integer
                    format: int32
                    description: Total number of bands in the sample
                    example: 50
                xml:
                  name: averageParticipantsResponse
        '500':
          $ref: '#/components/responses/InternalServerError'

  /bands/search/by-name-prefix:
    get:
      tags:
        - Search
      summary: Find bands by name prefix
      description: Returns an array of music bands whose names start with the given substring
      operationId: getBandsByNamePrefix
      parameters:
        - name: prefix
          in: query
          description: Band name prefix to search for
          required: true
          schema:
            type: string
            minLength: 1
          example: "The"
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
        - name: ignoreCase
          in: query
          description: Ignore case when searching
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of music bands with names starting with the specified prefix
          content:
            application/xml:
              schema:
                type: object
                properties:
                  bands:
                    type: array
                    items:
                      $ref: '#/components/schemas/MusicBand'
                  totalElements:
                    type: integer
                    format: int64
                  searchPrefix:
                    type: string
                    description: Used search prefix
                xml:
                  name: bandsByPrefixResponse
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /bands/search/by-genre-less-than:
    get:
      tags:
        - Search
      summary: Find bands with genre less than specified
      description: |
        Returns an array of music bands whose genre field value is less than the given one.
        Genre order ascending: PROGRESSIVE_ROCK (0) < POP (1) < MATH_ROCK (2)
      operationId: getBandsByGenreLessThan
      parameters:
        - name: genre
          in: query
          description: Genre for comparison
          required: true
          schema:
            $ref: '#/components/schemas/MusicGenre'
          example: POP
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
        - name: size
          in: query
          description: Page size
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: List of music bands with genre less than specified
          content:
            application/xml:
              schema:
                type: object
                properties:
                  bands:
                    type: array
                    items:
                      $ref: '#/components/schemas/MusicBand'
                  totalElements:
                    type: integer
                    format: int64
                  searchGenre:
                    $ref: '#/components/schemas/MusicGenre'
                xml:
                  name: bandsByGenreResponse
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /grammy/band/{band-id}/singles/add:
    post:
      tags:
        - Grammy
      summary: Add new single to band
      description: |
        Adds a new single to the specified music band.
      operationId: addSingleToBand
      parameters:
        - name: band-id
          in: path
          description: Music band ID
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      requestBody:
        description: New single information
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Single'
            example: |
              <?xml version="1.0" encoding="UTF-8"?>
              <single>
                <title>Yesterday</title>
                <duration>125</duration>
                <releaseDate>1965-09-13</releaseDate>
                <chartPosition>1</chartPosition>
              </single>
      responses:
        '201':
          description: Single successfully added to band
          content:
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                    example: "Single successfully added to band"
                  single:
                    $ref: '#/components/schemas/Single'
                  bandInfo:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int32
                      name:
                        type: string
                    description: Brief band information
                xml:
                  name: addSingleResponse
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Music band not found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /grammy/band/{band-id}/participants/add:
    post:
      tags:
        - Grammy
      summary: Add participant to band
      description: |
        Adds a new participant to the specified music band.
        Automatically updates numberOfParticipants field in the main band record.
      operationId: addParticipantToBand
      parameters:
        - name: band-id
          in: path
          description: Music band ID
          required: true
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 1
      requestBody:
        description: New participant information
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/Participant'
            example: |
              <?xml version="1.0" encoding="UTF-8"?>
              <participant>
                <name>John Lennon</name>
                <role>Vocalist, Guitarist</role>
                <joinDate>1960-07-06</joinDate>
                <instrument>Guitar</instrument>
              </participant>
      responses:
        '201':
          description: Participant successfully added to band
          content:
            application/xml:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
                    example: "Participant successfully added to band"
                  participant:
                    $ref: '#/components/schemas/Participant'
                  updatedParticipantsCount:
                    type: integer
                    format: int32
                    description: Updated number of participants in the band
                  bandInfo:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int32
                      name:
                        type: string
                    description: Brief band information
                xml:
                  name: addParticipantResponse
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Music band not found
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    MusicBand:
      type: object
      required:
        - name
        - coordinates
        - numberOfParticipants
        - genre
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
          description: Unique band ID (generated automatically)
          readOnly: true
          example: 1
        name:
          type: string
          minLength: 1
          description: Music band name (cannot be null or empty)
          example: "The Beatles"
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        creationDate:
          type: string
          format: date-time
          description: Record creation date (generated automatically)
          readOnly: true
          example: "2023-12-01T10:30:00Z"
        numberOfParticipants:
          type: integer
          format: int32
          minimum: 1
          description: Number of band participants (must be greater than 0)
          example: 4
        albumsCount:
          type: integer
          format: int32
          minimum: 1
          nullable: true
          description: Number of albums (can be null, if specified - must be greater than 0)
          example: 13
        genre:
          $ref: '#/components/schemas/MusicGenre'
        label:
          $ref: '#/components/schemas/Label'
      xml:
        name: musicBand

    Coordinates:
      type: object
      required:
        - y
      properties:
        x:
          type: number
          format: double
          description: X coordinate
          example: 10.5
        y:
          type: integer
          format: int64
          maximum: 945
          description: Y coordinate (maximum value 945, cannot be null)
          example: 100
      xml:
        name: coordinates

    Label:
      type: object
      properties:
        sales:
          type: number
          format: double
          minimum: 0
          exclusiveMinimum: true
          description: Label sales (value must be greater than 0)
          example: 1000000.50
      xml:
        name: label

    MusicGenre:
      type: string
      enum:
        - PROGRESSIVE_ROCK
        - POP
        - MATH_ROCK
      description: |
        Music genre. Order for comparison:
        - PROGRESSIVE_ROCK (0)
        - POP (1) 
        - MATH_ROCK (2)
      example: POP

    Single:
      type: object
      required:
        - title
        - duration
        - releaseDate
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
          description: Unique single ID
          readOnly: true
          example: 1
        title:
          type: string
          minLength: 1
          description: Single title
          example: "Yesterday"
        duration:
          type: integer
          format: int32
          minimum: 1
          description: Single duration in seconds
          example: 125
        releaseDate:
          type: string
          format: date
          description: Single release date
          example: "1965-09-13"
        chartPosition:
          type: integer
          format: int32
          minimum: 1
          nullable: true
          description: Chart position (can be null)
          example: 1
      xml:
        name: single

    Participant:
      type: object
      required:
        - name
        - role
        - joinDate
      properties:
        id:
          type: integer
          format: int32
          minimum: 1
          description: Unique participant ID
          readOnly: true
          example: 1
        name:
          type: string
          minLength: 1
          description: Participant name
          example: "John Lennon"
        role:
          type: string
          minLength: 1
          description: Participant role in the band
          example: "Vocalist, Guitarist"
        joinDate:
          type: string
          format: date
          description: Date of joining the band
          example: "1960-07-06"
        instrument:
          type: string
          nullable: true
          description: Main instrument (can be null)
          example: "Guitar"
      xml:
        name: participant

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
          example: 400
        message:
          type: string
          description: Error message
          example: "Validation failed"
        details:
          type: string
          description: Detailed error description
          example: "Field 'name' cannot be empty"
        timestamp:
          type: string
          format: date-time
          description: Error occurrence time
          example: "2023-12-01T10:30:00Z"
      xml:
        name: error

  responses:
    BadRequest:
      description: Invalid request data or integrity constraint violation
      content:
        application/xml:
          schema:
            $ref: '#/components/schemas/Error'
          example: |
            <?xml version="1.0" encoding="UTF-8"?>
            <error>
              <code>400</code>
              <message>Validation failed</message>
              <details>Field 'name' cannot be empty</details>
              <timestamp>2023-12-01T10:30:00Z</timestamp>
            </error>
    
    NotFound:
      description: Data not found
      content:
        application/xml:
          schema:
            $ref: '#/components/schemas/Error'
          example: |
            <?xml version="1.0" encoding="UTF-8"?>
            <error>
              <code>404</code>
              <message>Resource not found</message>
              <details>MusicBand with id 123 not found</details>
              <timestamp>2023-12-01T10:30:00Z</timestamp>
            </error>
    
    InternalServerError:
      description: Internal server error
      content:
        application/xml:
          schema:
            $ref: '#/components/schemas/Error'
          example: |
            <?xml version="1.0" encoding="UTF-8"?>
            <error>
              <code>500</code>
              <message>Internal server error</message>
              <details>An unexpected error occurred while processing the request</details>
              <timestamp>2023-12-01T10:30:00Z</timestamp>
            </error>

    ServiceUnavailable:
      description: Service unavailable error
      content:
        application/xml:
          schema:
            $ref: '#/components/schemas/Error'
          example: |
            <?xml version="1.0" encoding="UTF-8"?>
            <error>
              <code>503</code>
              <message>Service unavailable error</message>
              <details>URI /bands/1 is not available  </details>
              <timestamp>2023-12-01T10:30:00Z</timestamp>
            </error>

            
